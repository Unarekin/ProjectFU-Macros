{
  "name": "Adjust Ability Clock - MATT",
  "type": "script",
  "author": "PPShuIcaH5NYIBgf",
  "img": "modules/erica-pfu-macros/assets/icons/6-Clock.webp",
  "scope": "global",
  "command": "\"/**\\n * Adjust the clock associated with an ability on a given character.\\n * This function expects 2 or 3 arguments passed from MATT:\\n *  Actor ID, name, UUID, token, or an instance of the Actor object itself\\n *  The ID, UUID, name, or instance of the ability with a clock to adjust\\n *  Optionally, an option to specify how to adjust the clock in one of the following formats:\\n *    #     - Add # to the clock\\n *    -#    - Subtract # from the clock\\n *    =#    - Set the clock to #\\n *    max   - Set the clock to its maximum value\\n *    step  - Increase the clock by its step value (usually 1)\\n *    -step - Decrease the clock by its step value (usually 1)\\n *\\n *  If the third argument is omitted, it will default to incrementing the clock.\\n *\\n * This script supports both the most recent Project FU version (2.4.8 at the time of writing), and 2.3.11,\\n * and actually also works for Zero Powers.\\n */\\n\\n(async () => {\\n  try {\\n    const actor = EricaPFU.coerceActor(args[0]);\\n    if (!(actor instanceof Actor)) throw new Error(`Invalid actor: ${args[0]}`);\\n\\n    const ability = EricaPFU.coerceItem(actor, args[1]);\\n    if (!(ability instanceof Item))\\n      throw new Error(`Unable to locate item: ${args[1]}`);\\n\\n    const progress =\\n      typeof ability.system.progress === \\\"object\\\"\\n        ? ability.system.progress\\n        : typeof ability.system.data.progress === \\\"object\\\"\\n        ? ability.system.data.progress\\n        : undefined;\\n\\n    if (typeof progress === \\\"undefined\\\")\\n      throw new Error(`${ability.name} does not have an associated clock.`);\\n\\n    const adjust = typeof args[2] === \\\"string\\\" ? args[2].trim() : args[2];\\n\\n    // const adjustment = EricaPFU.calculateStandardAdjustment(progress.current, adjust, 0, progress.max, true);\\n    const adjustment = EricaPFU.calculateStandardAdjustment(\\n      adjust,\\n      progress.current,\\n      progress.step,\\n      progress.max,\\n      true\\n    );\\n\\n    if (ability.system.progress) {\\n      await actor.updateEmbeddedDocuments(\\\"Item\\\", [\\n        {\\n          _id: ability.id,\\n          system: {\\n            progress: {\\n              current: adjustment,\\n            },\\n          },\\n        },\\n      ]);\\n    } else if (ability.system.data.progress) {\\n      await actor.updateEmbeddedDocuments(\\\"Item\\\", [\\n        {\\n          _id: ability.id,\\n          system: {\\n            data: {\\n              progress: {\\n                current: adjustment,\\n              },\\n            },\\n          },\\n        },\\n      ]);\\n    } else {\\n      throw new Error(\\\"Unable to determine how to update ability progress.\\\");\\n    }\\n  } catch (err) {\\n    ui.notifications.error(err.message, { console: false });\\n    console.error(err);\\n  }\\n})();\\n\"",
  "folder": "1PGDS68bBtlkt6o7",
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "projectfu",
    "systemVersion": "2.4.8",
    "createdTime": 1736402329744,
    "modifiedTime": 1736402329744,
    "lastModifiedBy": "PPShuIcaH5NYIBgf"
  },
  "_id": "TJPx9EEW8bkcmjqY",
  "sort": 0,
  "ownership": {
    "default": 0,
    "PPShuIcaH5NYIBgf": 3
  },
  "_key": "!macros!TJPx9EEW8bkcmjqY"
}