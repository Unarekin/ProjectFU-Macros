{
  "name": "Modify Resources Dialog",
  "type": "script",
  "_id": "iqGbCrPzsWA15c66",
  "author": "PPShuIcaH5NYIBgf",
  "img": "icons/svg/dice-target.svg",
  "scope": "global",
  "command": "/***************************************************************************\n * Resource Modification Macro\n *\n * This macro will handle adjusting a token's HP, MP, and/or IP\n * When removing HP, it will respect the token's Damage Affinities, where\n * applicable.\n *\n * By Erica, adapted from a macro by Dark Magician Girl\n ***************************************************************************/\n\n/**\n * Localization strings.  Should you want to translate the text displayed for this macro into another language, make changes here.\n */\n// #region Localization\nconst LOCALIZATION = {\n  MESSAGES: {\n    NOUPDATES: \"No updates to perform.\",\n  },\n  NOLINKEDACTORCONFIRM: {\n    TITLE: \"Confirm\",\n    MESSAGE:\n      \"Are you sure you wish to add {name}?\\nThis actor's token is not linked to the actor, and any changes made here will not be reflected on any tokens currently in the scene.\",\n  },\n  DIALOG: {\n    TITLE: \"Modify Resources\",\n    LABELS: {\n      RESOURCE: \"{RESOURCE}:\",\n      ALLTOMAX: \"Set {HP}/{MP}/{IP} To Max\",\n      BYPASSCLAMPING: \"Bypass Value Clamping\",\n    },\n    ADDTOKENS: {\n      TITLE: \"Add Token(s)\",\n      MESSAGE:\n        \"Please select one or more tokens in the scene, and hit 'Ok' when done.\",\n      BUTTONS: {\n        OK: \"Ok\",\n        CANCEL: \"Cancel\",\n      },\n    },\n    BUTTONS: {\n      OK: \"Apply\",\n      CANCEL: \"Cancel\",\n      INCREMENT: \"Increment {RESOURCE}\",\n      DECREMENT: \"Decrement {RESOURCE}\",\n      REMOVE: \"Remove {NAME}\",\n      ADDTOKENS: \"Add Token(s)\",\n    },\n    OPERATIONS: {\n      INCREASE: \"Increase {RESOURCE} By:\",\n      DECREASE: \"Decrease {RESOURCE} By:\",\n      TOMAX: \"Set {RESOURCE} To Max\",\n      TOZERO: \"Set {RESOURCE} To Zero\",\n      TOCRISIS: \"Set {RESOURCE} To Crisis\",\n      ZPADVANCE: \"Advance Zero Power Clock By:\",\n      ZPCLEAR: \"Clear Zero Power Clock\",\n      TOVALUE: \"Set {RESOURCE} To Value:\",\n      ZPTOVALUE: \"Set Clock To:\",\n    },\n  },\n  RESOURCES: {\n    HP: \"HP\",\n    MP: \"MP\",\n    IP: \"IP\",\n    ZP: \"Zero Power\",\n  },\n  DAMAGETYPES: {\n    PHYSICAL: \"Physical\",\n    AIR: \"Air\",\n    BOLT: \"Bolt\",\n    DARK: \"Dark\",\n    EARTH: \"Earth\",\n    FIRE: \"Fire\",\n    ICE: \"Ice\",\n    LIGHT: \"Light\",\n    POISON: \"Poison\",\n    UNTYPED: \"Untyped\",\n  },\n  IGNOREAFFINITIES: {\n    NONE: \"Apply Damage Affinities\",\n    RESISTANCES: \"Ignore Damage Resistance\",\n    RESISTANCESANDIMMUNITIES: \"Ignore Damage Resistance and Immunity\",\n    ALL: \"Ignore All Damage Affinities\",\n  },\n  ERRORS: {\n    NOTOKENS: \"No token(s) selected.\",\n    UNKNOWNOPERATION: \"Unknown {RESOURCE} operation: {OP}\",\n    INVALIDFIELD: \"Invalid field: {FIELD}\",\n    INVALIDACTOR: \"Invalid actor\",\n    INVALIDFOLDER: \"Invalid folder\",\n  },\n  WARNINGS: {\n    ACTOREXISTS: \"{NAME} already selected.\",\n  },\n  INFO: {\n    ACTORADDED: \"{NAME} added to dialog.\",\n  },\n  CHATCARD: {\n    HEADER: \"The following changes were made by {NAME}:\",\n    ZPREADY: \"Ready!\",\n  },\n};\n\n/**\n * Handles substituting tokens in a localization string\n * @param {string} text - Localization string to be processed\n * @param {[string, string][]} subs - A two-dimensional array of strings, the 0th element of each entry representing a token to be replaced, and the 1st element the value.\n */\nfunction localize(text, subs) {\n  return subs.reduce(\n    (prev, curr) => prev.replaceAll(`{${curr[0]}}`, curr[1]),\n    text\n  );\n}\n\n// #endregion\n\n/***************************************************************************\n * Constants\n **************************************************************************/\n// #region Constants\nconst PC_TYPE = \"character\";\nconst ZERO_POWER_TYPE = \"projectfu.zeroPower\";\n\nconst USE_DIALOGV2 = game.release.isNewer(12);\n// const USE_DIALOGV2 = false;\n\nconst ZP_ENABLED = game.settings?.get(\"projectfu\", \"optionZeroPower\") ?? false;\n\nconst DAMAGE_TYPES = [\n  \"physical\",\n  \"air\",\n  \"bolt\",\n  \"dark\",\n  \"earth\",\n  \"fire\",\n  \"ice\",\n  \"light\",\n  \"poison\",\n  \"untyped\",\n];\n\n/** Bit flag enum for bypassing affinities */\nconst IgnoreAffinity = {\n  Resistances: 1 << 0, // 1\n  Vulnerabilities: 1 << 1, // 2\n  Immunities: 1 << 2, // 4\n  Absorption: 1 << 3, // 8\n\n  All: (1 << 4) - 1, // 15\n};\n\nconst DIALOG_WIDTH = 710;\nconst DIALOGV2_WIDTH = 770;\n\n// Kinda hacky, but will grab the major and minor version of the system (IE 2.4)\nconst SYSTEM_VERSION = parseFloat(game.system.version);\n\nlet DIALOG_PARENT_ELEMENT;\n\n// #endregion\n\ntry {\n  let selectedTokens = [];\n\n  console.log(typeof args !== \"undefined\" ? args : undefined);\n\n  if (typeof args === \"object\" && Array.isArray(args) && args.length) {\n    if (args[0] === \"all\") {\n      selectedTokens = canvas.scene.tokens.filter((token) => token.isOwner);\n    } else {\n      selectedTokens = args.reduce((prev, curr) => {\n        // Check for UUID\n        let actor = fromUuidSync(curr);\n        // Check for actor id\n        if (!actor) actor = game.actors.get(curr);\n        // Check for token name\n        if (!actor) actor = canvas.scene.tokens.getName(curr);\n        // Check for token id\n        if (!actor) actor = canvas.scene.tokens.get(curr);\n\n        if (typeof actor.actor !== \"undefined\") actor = actor.actor;\n\n        console.log(\"Actor:\", actor);\n\n        if (!actor) return prev;\n        if (!actor.isOwner) return prev;\n        const token = canvas.scene.tokens.contents.find(\n          (doc) => doc.actor.id === actor.id\n        );\n        if (!token) return prev;\n        return [...prev, token.object];\n      }, []);\n    }\n  } else if (canvas.tokens.controlled.length) {\n    selectedTokens = canvas.tokens.controlled.filter(\n      (token) => token.actor?.isOwner\n    );\n  } else if (game.user.character) {\n    selectedTokens = canvas.scene.tokens.find(\n      (token) => token.actor?.id === game.user.character?.id\n    );\n  }\n\n  console.log(\"Selected:\", selectedTokens);\n  // if (!selectedTokens.length) throw new Error(LOCALIZATION.ERRORS.NOTOKENS);\n\n  /***************************************************************************\n   * Templates\n   **************************************************************************/\n\n  // #region Templates\n\n  const TOKEN_RESOURCE_TEMPLATE = `\n  <tr>\n    <td class=\"right resource-label\"><strong>{{label}}</strong></td>\n    <td>\n      <div class=\"progress\">\n        <div class=\"back {{class}}\">{{current}} / {{max}}</div>\n        <div class=\"front\" style=\"clip-path: inset(0 0 0 {{perc}}%);-webkit-clip-path: inset(0 0 0 {{perc}}%)\">{{current}} / {{max}}</div>\n      </div>\n    </td>\n  </tr>\n  `;\n\n  const TOKEN_ITEM_TEMPLATE = `\n  {{#* inline \"tokenResource\"}}${TOKEN_RESOURCE_TEMPLATE}{{/inline}}\n  <table class=\"token-item\" data-token-id=\"{{token.id}}\" data-actor-id=\"{{actor.id}}\">\n  {{#with actor}}\n  <tr>\n    <td rowspan=\"4\" class=\"token-image\" style=\"position:relative;\">\n      <i class=\"fas fa-circle-xmark remove-button\" title=\"{{localize '${LOCALIZATION.DIALOG.BUTTONS.REMOVE}' NAME=this.name}}\" data-operation=\"remove-token\" data-index=\"{{index}}\"></i>\n      <img src=\"{{image}}\">\n    </td>\n    <th colspan=\"2\">{{name}}</th>\n  </tr>\n  {{> tokenResource hp class=\"hp\" }}\n  {{> tokenResource mp class=\"mp\" }}\n  {{#if isPC }}\n    {{> tokenResource ip class=\"ip\" }}\n  {{ else }}\n    <tr><td><br></td></tr>\n  {{/if}}\n  {{/with}}\n</table>`;\n\n  const TOKEN_HEADER_TEMPLATE = `\n  {{#* inline \"tokenItem\"}}${TOKEN_ITEM_TEMPLATE}{{/inline}}\n  <div class=\"flexrow token-header\">\n    {{#each actors}}\n    {{> tokenItem this}}\n    {{/each}}\n  </div>\n  <button data-action='add-tokens'>\n    <i class=\"fas fa-plus\"></i>\n    ${LOCALIZATION.DIALOG.BUTTONS.ADDTOKENS}\n  </button>\n  `;\n\n  /**\n   * Generate a standardized option tag for a given resource operation.\n   * @param {string} op\n   * @param {string} resource\n   * @param {number} value\n   * @returns\n   */\n  function operationOption(op, resource, value) {\n    return `<option value=\"${value}\">${localize(\n      LOCALIZATION.DIALOG.OPERATIONS[op],\n      [[\"RESOURCE\", resource]]\n    )}</option>`;\n  }\n\n  function damageTypeOption(dmg) {\n    return `<option value=\"${dmg.toLowerCase()}\">${\n      LOCALIZATION.DAMAGETYPES[dmg.toUpperCase()]\n    }</option>`;\n  }\n\n  const HP_OPERATIONS_TEMPLATE = `\n  <div class=\"flexrow\" data-operation-row data-resource=\"hp\">\n    <div class=\"flexrow\">\n      <i class=\"fas fa-heart-crack hp resource-icon\"></i>\n      <select id=\"hpOperation\" name=\"hpOperation\" data-operation-type>\n        ${operationOption(\"DECREASE\", \"HP\", 0)}\n        ${operationOption(\"INCREASE\", \"HP\", 1)}\n        ${operationOption(\"TOMAX\", \"HP\", 2)}\n        ${operationOption(\"TOZERO\", \"HP\", 3)}\n        ${operationOption(\"TOCRISIS\", \"HP\", 4)}\n        ${operationOption(\"TOVALUE\", \"HP\", 5)}\n      </select>\n      <div></div>\n    </div>\n    <div class=\"flexrow\">\n      <input type=\"number\" id=\"attributeHP\" name=\"attributeHP\" value=\"0\" step=\"1\" autofocus data-operation-value>\n      <div>\n        <select id=\"damageType\" name=\"damageType\" class=\"full-width\">\n        ${DAMAGE_TYPES.map(damageTypeOption).join(\"\")}\n        </select>\n      </div>\n      <div>\n        <select id=\"ignoreAffinities\" name=\"ignoreAffinities\" class=\"full-width\">\n          <option value=\"0\">${LOCALIZATION.IGNOREAFFINITIES.NONE}</option>\n          <option value=\"1\">${\n            LOCALIZATION.IGNOREAFFINITIES.RESISTANCES\n          }</option>\n          <option value=\"5\">${\n            LOCALIZATION.IGNOREAFFINITIES.RESISTANCESANDIMMUNITIES\n          }</option>\n          <option value=\"15\">${LOCALIZATION.IGNOREAFFINITIES.ALL}</option>\n        </select>\n      </div>\n      <button class=\"num-button\" data-operation=\"decrement\" data-field=\"attributeHP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.DECREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.HP]]\n      )}\">-</button>\n      <button class=\"num-button\" data-operation=\"increment\" data-field=\"attributeHP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.INCREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.HP]]\n      )}\">+</button>\n    </div>\n  </div>\n  `;\n\n  const MP_OPERATIONS_TEMPLATE = `\n  <div class=\"flexrow\" data-operation-row data-resource=\"mp\">\n    <div class=\"flexrow\">\n      <i class=\"fas fa-hat-wizard icon mp resource-icon\"></i>\n      <select id=\"mpOperation\" name=\"mpOperation\" data-operation-type>\n          ${operationOption(\"DECREASE\", \"MP\", 0)}\n          ${operationOption(\"INCREASE\", \"MP\", 1)}\n          ${operationOption(\"TOMAX\", \"MP\", 2)}\n          ${operationOption(\"TOZERO\", \"MP\", 3)}\n          ${operationOption(\"TOVALUE\", \"MP\", 5)}\n      </select>\n      <div></div>\n    </div>\n    <div class=\"flexrow\">\n      <input type=\"number\" id=\"attributeMP\" name=\"attributeMP\" value=\"0\" step=\"1\" data-operation-value>\n      <button class=\"num-button\" data-operation=\"decrement\" data-field=\"attributeMP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.DECREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.MP]]\n      )}\">-</button>\n      <button class=\"num-button\" data-operation=\"increment\" data-field=\"attributeMP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.INCREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.MP]]\n      )}\">+</button>\n    </div>\n  </div>\n  `;\n\n  const IP_OPERATIONS_TEMPLATE = `\n  <div class=\"flexrow\" data-operation-row{{#if hasPC}}{{else}} style=\"display:none;\"{{/if}} data-resource=\"ip\">\n    <div class=\"flexrow\">\n      <i class=\"ra ra-gear-hammer icon ip resource-icon\"></i>\n      <select id=\"ipOperation\" name=\"ipOperation\" data-operation-type>\n        ${operationOption(\"DECREASE\", \"IP\", 0)}\n        ${operationOption(\"INCREASE\", \"IP\", 1)}\n        ${operationOption(\"TOMAX\", \"IP\", 2)}\n        ${operationOption(\"TOZERO\", \"IP\", 3)}\n        ${operationOption(\"TOVALUE\", \"IP\", 5)}\n      </select>\n      <div></div>\n    </div>\n    <div class=\"flexrow\">\n      <input type=\"number\" id=\"attributeIP\" name=\"attributeIP\" value=\"0\" step=\"1\" data-operation-value>\n      <button class=\"num-button\" data-operation=\"decrement\" data-field=\"attributeIP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.DECREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.IP]]\n      )}\">-</button>\n      <button class=\"num-button\" data-operation=\"increment\" data-field=\"attributeIP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.INCREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.IP]]\n      )}\">+</button>\n    </div>\n  </div>\n  `;\n\n  const ZP_OPERATIONS_TEMPLATE = `\n  <div class=\"flexrow\"{{#if hasZP}}{{else}} style=\"display:none;\"{{/if}} data-resource=\"zp\">\n    <div class=\"flexrow\">\n      <i class=\"fas fa-bolt icon zp resource-icon\"></i>\n      <select id=\"zpOperation\" name=\"zpOperation\">\n        <option value=\"0\">${LOCALIZATION.DIALOG.OPERATIONS.ZPADVANCE}</option>\n        <option value=\"1\">${LOCALIZATION.DIALOG.OPERATIONS.ZPCLEAR}</option>\n        <option value=\"5\">${LOCALIZATION.DIALOG.OPERATIONS.ZPTOVALUE}</option>\n      </select>\n      <div></div>\n    </div>\n    <div class=\"flexrow\">\n      <input type=\"number\" id=\"attributeZP\" name=\"attributeZP\" value=\"0\" step=\"1\" max=\"6\" min=\"0\">\n      <button class=\"num-button\" data-operation=\"decrement\" data-field=\"attributeZP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.DECREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.ZP]]\n      )}\">-</button>\n      <button class=\"num-button\" data-operation=\"increment\" data-field=\"attributeZP\" title=\"${localize(\n        LOCALIZATION.DIALOG.BUTTONS.INCREMENT,\n        [[\"RESOURCE\", LOCALIZATION.RESOURCES.ZP]]\n      )}\">+</button>\n    </div>\n  </div>\n  `;\n\n  const OPERATIONS_TEMPLATE = `\n  {{#* inline \"hpOperations\"}}${HP_OPERATIONS_TEMPLATE}{{/inline}}\n  {{#* inline \"mpOperations\"}}${MP_OPERATIONS_TEMPLATE}{{/inline}}\n  {{#* inline \"ipOperations\"}}${IP_OPERATIONS_TEMPLATE}{{/inline}}\n  {{#* inline \"zpOperations\"}}${ZP_OPERATIONS_TEMPLATE}{{/inline}}\n  <div class=\"flexcol resource-options\">\n    {{> hpOperations }}\n    {{> mpOperations }}\n    {{> ipOperations }}\n    {{> zpOperations }}\n    <div class=\"flexrow\">\n      <div>\n        <div class=\"resource-icon\"></div>\n        <div>\n          <input type=\"checkbox\" class=\"leftcheck\" id=\"allToMax\" name=\"allToMax\" value=\"true\"><label for=\"allToMax\" class=\"checklabel\">${localize(\n            LOCALIZATION.DIALOG.LABELS.ALLTOMAX,\n            [\n              [\"HP\", LOCALIZATION.RESOURCES.HP],\n              [\"MP\", LOCALIZATION.RESOURCES.MP],\n              [\"IP\", LOCALIZATION.RESOURCES.IP],\n            ]\n          )}</label>\n        </div>\n      </div>\n      <div>\n        <div>\n          <input type=\"checkbox\" class=\"leftcheck\" id=\"bypassClamping\" name=\"bypassClamping\" value=\"true\"><label for=\"bypassClamping\" class=\"checklabel\">${\n            LOCALIZATION.DIALOG.LABELS.BYPASSCLAMPING\n          }</label>\n        </div>\n      </div>\n    </div>\n  </div>\n  `;\n\n  const DIALOG_TEMPLATE = `\n  {{#* inline \"tokenHeader\"}}${TOKEN_HEADER_TEMPLATE}{{/inline}}\n  {{#* inline \"resourceOperations\"}}${OPERATIONS_TEMPLATE}{{/inline}}\n  \n  <div id=\"resourcesForm\" class=\"flexcol\">\n    <form>\n    {{> tokenHeader this}}\n    <hr>\n    {{> resourceOperations this}}\n    </form>\n  </div>\n  `;\n\n  // Chat card templates\n  const USER_CARD_FLAVOR_TEMPLATE = `\n    <strong>${localize(LOCALIZATION.CHATCARD.HEADER, [\n      [\"NAME\", game.users.current.name],\n    ])}</strong>\n    {{#if hasResourceUpdate}}\n    <table>\n      <tr>\n        <th style=\"width:33%;text-align:center\">${\n          LOCALIZATION.RESOURCES.HP\n        }</th>\n        <th style=\"width:33%;text-align:center\">${\n          LOCALIZATION.RESOURCES.MP\n        }</th>\n        <th style=\"width:33%;text-align:center\">{{#if isPC}}${\n          LOCALIZATION.RESOURCES.IP\n        }{{/if}}</th>\n      </tr>\n      <tr>\n        <td style=\"text-align:center\">{{#if hp}}{{hp.current}} → {{hp.new}}{{/if}}</td>\n        <td style=\"text-align:center\">{{#if mp}}{{mp.current}} → {{mp.new}}{{/if}}</td>\n        <td style=\"text-align:center\">{{#if ip}}{{ip.current}} → {{ip.new}}{{/if}}</td>\n      </tr>\n    </table>\n    {{/if}}\n    {{#if zp}}\n    <br>\n      <div style=\"text-align:center\">\n        <strong>{{zp.name}}</strong>\n      </div>\n      <br>\n      <div class=\"flexrow\">\n        <div class=\"flex1\"></div>\n        <div class=\"projectfu flex1 flexrow\">\n          <div></div>\n          <div class=\"progress-container\">\n            {{> \"systems/projectfu/templates/optional/partials/feature-progress-clock.hbs\" zp}}\n          </div>\n          <div></div>\n        </div>\n        <div class=\"flex1\"></div>\n      </div>\n      {{#if zp.isReady}}\n        <div class=\"detail-desc flexrow\">\n          <div>\n            <label class=\"total default\">\n              <div></div>\n              <div>${LOCALIZATION.CHATCARD.ZPREADY}</div>\n              <div class=\"endcap gap-5\"></div>\n            </label>\n          </div>\n        </div>\n      {{/if}}\n    {{/if}}\n  `;\n\n  const USER_CARD_CONTENT_TEMPLATE = SYSTEM_VERSION >= 2.4 ? `` : ``;\n\n  const GM_CARD_FLAVOR_TEMPLATE = `\n  ${localize(LOCALIZATION.CHATCARD.HEADER, [[\"NAME\", game.users.current.name]])}\n  \n  {{#each this}}\n    <table>\n      <tr>\n        <th colspan=\"4\" style=\"text-align:center\">{{name}}</th>\n      </tr>\n      <tr>\n        <td rowspan=\"5\" style=\"max-width:53px;min-width:53px;width:53px;\">\n          <img src=\"{{img}}\" style=\"width:48px;border:none\">\n        </td>\n      </tr>\n      {{#if hasResourceUpdate}}\n        <tr>\n          <th style=\"width:33%;text-align:center\">${\n            LOCALIZATION.RESOURCES.HP\n          }</th>\n          <th style=\"width:33%;text-align:center\">${\n            LOCALIZATION.RESOURCES.MP\n          }</th>\n          <th style=\"width:33%;text-align:center\">${\n            LOCALIZATION.RESOURCES.IP\n          }</th>\n        </tr>\n        <tr>\n          <td style=\"text-align:center\">{{#if hp}}{{hp.current}} → {{hp.new}}{{/if}}</td>\n          <td style=\"text-align:center\">{{#if mp}}{{mp.current}} → {{mp.new}}{{/if}}</td>\n          <td style=\"text-align:center\">{{#if ip}}{{ip.current}} → {{ip.new}}{{/if}}</td>\n        </tr>\n      {{/if}}\n      {{#if zp}}\n        <tr>\n          <th colspan=\"3\" style=\"text-align:center\">{{zp.name}}</th>\n        </tr>\n        <tr>\n          <td colspan=\"3\" style=\"text-align:center\">{{zp.current}} → {{zp.new}}</td>\n        </tr>\n      {{/if}}\n    </table>\n  {{/each}}\n  `;\n  const GM_CARD_CONTENT_TEMPLATE = ``;\n\n  const ADD_TOKEN_DIALOG_TEMPLATE = `\n  <p>${LOCALIZATION.DIALOG.ADDTOKENS.MESSAGE}</p>\n  <div data-role=\"token-names\"></div>\n  `;\n\n  // #endregion\n\n  const tokenItemRenderFunc = Handlebars.compile(TOKEN_ITEM_TEMPLATE);\n\n  const renderFunc = Handlebars.compile(DIALOG_TEMPLATE);\n  const userCardFlavorRenderFunc = Handlebars.compile(\n    USER_CARD_FLAVOR_TEMPLATE\n  );\n  const userCardContentRenderFunc = Handlebars.compile(\n    USER_CARD_CONTENT_TEMPLATE\n  );\n\n  const gmCardFlavorRenderFunc = Handlebars.compile(GM_CARD_FLAVOR_TEMPLATE);\n  const gmCardContentRenderFunc = Handlebars.compile(GM_CARD_CONTENT_TEMPLATE);\n\n  const addTokenRenderFunc = Handlebars.compile(ADD_TOKEN_DIALOG_TEMPLATE);\n\n  // #region Helper Functions\n  /***************************************************************************\n   * Helper Functions\n   **************************************************************************/\n\n  /**\n   * Returns true if a token is a PC type\n   * @param {FUActor} actor\n   * @returns {boolean}\n   */\n  function isPC(actor) {\n    return actor.type === PC_TYPE;\n  }\n\n  /** Token resource functions  */\n  /**\n   * Retrieves current value of a resource (hp, mp, ip, etc) for a given token\n   * @param {FUActor} actor\n   * @param {string} resource\n   * @returns {number}\n   */\n  function getResourceValue(actor, resource) {\n    return actor.system.resources[resource].value;\n  }\n\n  /**\n   * Retrieves the maximum value of a resource (hp, mp, ip, etc) for a given token.\n   * @param {FUActor} actor\n   * @param {string} resource\n   * @returns {number}\n   */\n  function getResourceMax(actor, resource) {\n    return actor.system.resources[resource].max;\n  }\n\n  /**\n   * Retrieves the percentage (0-100) of a resource (hp, mp, ip, etc) for a given token.\n   * @param {*} token\n   * @param {*} resource\n   * @returns\n   */\n  function getResourcePercentage(token, resource) {\n    return Math.floor(\n      (getResourceValue(token, resource) / getResourceMax(token, resource)) *\n        100\n    );\n  }\n\n  /**\n   * Returns a standardized representation of a given resource, appropriate for passing to a render function context.\n   * @param {Token} token\n   * @param {string} resource\n   */\n  function getResourceContext(token, resource) {\n    return {\n      current: getResourceValue(token, resource),\n      max: getResourceMax(token, resource),\n      perc: getResourcePercentage(token, resource),\n      label: LOCALIZATION.RESOURCES[resource.toUpperCase()],\n    };\n  }\n\n  /** Zero Power functions  */\n\n  /**\n   * Returns a given actor's Zero Power, if applicable\n   * @param {FUActor} actor}\n   * @returns {object}\n   */\n  function getZeroPower(actor) {\n    if (!ZP_ENABLED) return null;\n    return actor.items?.find(\n      (item) =>\n        item.system?.optionalType === ZERO_POWER_TYPE ||\n        item.type === \"zeroPower\"\n    );\n  }\n\n  /**\n   * Returns whether or not a given actor has a Zero Power\n   * @param {FUActor} actor\n   * @returns {boolean}\n   */\n  function hasZeroPower(actor) {\n    return !!getZeroPower(actor);\n  }\n\n  /**\n   * Determines if a Zero Power is from before powers were migrated to Optional Feature type\n   * @param {FUItem} power\n   */\n  function isLegacyZeroPower(power) {\n    return power.type === \"zeroPower\";\n  }\n\n  /**\n   * Returns the current progress object for a Zero Power\n   * @param {FUItem} power\n   * @returns {{current: number, max: number, name: string, step: number}}\n   */\n  function getZeroPowerProgress(power) {\n    if (isLegacyZeroPower(power)) return power.system.progress;\n    else return power.system.data.progress;\n  }\n\n  /**\n   * Returns the current number of sections of a Zero Power's clock that are filled\n   * @param {FUItem} power\n   * @returns {number}\n   */\n  function getZeroPowerProgressCurrent(power) {\n    return getZeroPowerProgress(power)?.current;\n  }\n\n  /**\n   * Returns the total number of sections a Zero Power's clock has.  This is probably 6.\n   * @param {FUItem} power\n   * @returns {number}\n   */\n  function getZeroPowerProgressMax(power) {\n    return getZeroPowerProgress(power)?.max;\n  }\n\n  /**\n   * Returns a trimmed down version of a Zero power item, appropriate for use in a rendering function context\n   * @param {Item} power\n   * @returns {object}\n   */\n  function getZeroPowerContext(power) {\n    if (!power) return null;\n    const isLegacy = isLegacyZeroPower(power);\n    return {\n      id: power.id,\n      name: power.name,\n      ...getZeroPowerProgress(power),\n      // max: power.system.data.progress.max || 6,\n      // current: power.system.data.progress.current || 0,\n      image: power.img,\n      trigger: {\n        name: isLegacy\n          ? power.system.zeroTrigger.value\n          : power.system.data.zeroTrigger.value,\n        desc: isLegacy\n          ? power.system.zeroTrigger.description\n          : power.system.data.zeroTrigger.description,\n      },\n      effect: {\n        name: isLegacy\n          ? power.system.zeroEffect.value\n          : power.system.data.zeroEffect.value,\n        desc: isLegacy\n          ? power.system.zeroEffect.description\n          : power.system.data.zeroEffect.description,\n      },\n    };\n  }\n\n  /**\n   * Sets a clock to a given value, generally used for Zero Power clocks.\n   * @param {FUActor} actor  The actor who owns the item with which the clock is associated\n   * @param {FUItem} item The item containing the clock\n   * @param {number} value The value to which to set the clock.  Will be clamped from 0-[max value for clock]\n   */\n  async function setClockTo(actor, item, value) {\n    const max = getZeroPowerProgressMax(item);\n    const actual = clamp(value, 0, max);\n\n    if (isLegacyZeroPower(item)) {\n      await actor.updateEmbeddedDocuments(\"Item\", [\n        {\n          _id: item.id,\n          system: { progress: { current: actual } },\n        },\n      ]);\n    } else {\n      await actor.updateEmbeddedDocuments(\"Item\", [\n        {\n          _id: item.id,\n          system: { data: { progress: { current: actual } } },\n        },\n      ]);\n    }\n    return actual;\n  }\n\n  /**\n   * Advances a clock by a given amount.  Generally used for Zero Power clocks.\n   * @param {FUActor} actor\n   * @param {FUItem} item The item containing the clock.\n   * @param {number} amount The amount by which to advance this clock.  Will be clamped from 0-[max value for clock]\n   * @returns {Promise<number>} A promise that resolves to the new value of this clock.\n   */\n  async function advanceClock(actor, item, amount) {\n    return setClockTo(actor, item, item.system.data.progress.current + amount);\n  }\n\n  /**\n   * Sets a clock's progress to 0.  Generally used for Zero Power clocks.\n   * @param {number} actorId\n   * @param {FUItem} item The item containing the clock to reset.\n   * @returns {Promise<number>} A promise that resolves to the new value of this clock\n   */\n  async function clearClock(actor, item) {\n    return setClockTo(actor, item, 0);\n  }\n\n  /**\n   * Returns a modified representation of ag iven actor, appropriate for passing to the dialog render function context.\n   * @param {FUActor} actor\n   */\n  function getActorContext(actor) {\n    return {\n      id: actor.id,\n      name: actor.name,\n      image: actor.img,\n      isPC: isPC(actor),\n      hasZeroPower: hasZeroPower(actor),\n      zeroPower: getZeroPowerContext(getZeroPower(actor)),\n      hp: getResourceContext(actor, \"hp\"),\n      mp: getResourceContext(actor, \"mp\"),\n      ...(isPC(actor) ? { ip: getResourceContext(actor, \"ip\") } : {}),\n    };\n  }\n\n  function getTokenContext(token) {\n    return {\n      token: {\n        id: token.id,\n        name: token.name,\n      },\n      actor: getActorContext(token.actor),\n    };\n  }\n\n  function iterateElements(html, ids, callback) {\n    html.find(ids.map((id) => `#id`)).each(callback);\n  }\n\n  function getSelectValue(html, id) {\n    return html.find(`#${id}`).val();\n  }\n\n  function getOperationElements(elem) {\n    const parent = elem.parents(\"[data-operation-row]\");\n    return [\n      parent,\n      parent.find(\"[data-operation-type]\"),\n      parent.find(\"[data-operation-value]\"),\n    ];\n  }\n\n  function reconcileOperationRowDisabled(row) {\n    const op = parseInt(row.find(\"[data-operation-type]\").val());\n    const elems = row.find(\"input, select:not([data-operation-type]), button\");\n    if (op > 1 && op !== 5) elems.attr(\"disabled\", \"disabled\");\n    else elems.removeAttr(\"disabled\");\n  }\n\n  function coerceFormField(value) {\n    if (!isNaN(parseFloat(value))) return parseFloat(value);\n    if (value === \"true\") return true;\n    if (value === \"false\") return false;\n    if (value === \"on\") return true;\n\n    return value;\n  }\n\n  /**\n   * Creates an object representing our form data\n   * @param {JQuery<HTMLElement>} html\n   */\n  function parseFormData(form) {\n    return Object.fromEntries(\n      form\n        .serializeArray()\n        .map(({ name, value }) => [name, coerceFormField(value)])\n    );\n  }\n\n  function setResourceUpdate(actor, resource, value, update) {\n    if (getResourceValue(actor, resource) !== value) update[resource] = value;\n    return update;\n  }\n\n  function setMaxResourceUpdate(actor, resource, update) {\n    return setResourceUpdate(\n      actor,\n      resource,\n      getResourceMax(actor, resource),\n      update\n    );\n  }\n\n  /**\n   * Quick way to set an update for adding to a resource\n   * @param {FUActor} actor\n   * @param {string} resource\n   * @param {number} amount\n   * @param {boolean} shouldClamp\n   * @param {object} update\n   * @returns\n   */\n  function setAddResourceUpdate(actor, resource, amount, shouldClamp, update) {\n    return setResourceUpdate(\n      actor,\n      resource,\n      shouldClamp\n        ? clamp(\n            getResourceValue(actor, resource) + amount,\n            0,\n            getResourceMax(actor, resource)\n          )\n        : getResourceValue(actor, resource) + amount,\n      update\n    );\n  }\n\n  /**\n   * Quick way to set an update for subtracting from a resource\n   * @param {FUActor} actor\n   * @param {string} resource\n   * @param {number} amount\n   * @param {object} update\n   * @returns\n   */\n  function setSubResourceUpdate(actor, resource, amount, shouldClamp, update) {\n    return setResourceUpdate(\n      actor,\n      resource,\n      shouldClamp\n        ? clamp(\n            getResourceValue(actor, resource) - amount,\n            0,\n            getResourceMax(actor, resource)\n          )\n        : getResourceValue - amount,\n      update\n    );\n  }\n\n  /**\n   * Quick & easy function to clamp a value within two values\n   * @param {number} val The value to clamp\n   * @param {number} min Minimum value\n   * @param {number} max Maximum value\n   * @returns\n   */\n  function clamp(val, min, max) {\n    return Math.max(min, Math.min(val, max));\n  }\n\n  /**\n   * Boilerplate updates for every resource type\n   * @param {FUActor} actor\n   * @param {*} resource\n   * @param {*} op\n   * @param {*} amount\n   * @param {*} clamp\n   * @param {*} update\n   * @returns\n   */\n  function handleStandardResourceUpdates(\n    actor,\n    resource,\n    op,\n    amount,\n    clamp,\n    update\n  ) {\n    switch (op) {\n      case 0:\n        // Decrease\n        break;\n      case 1:\n        // Increase\n        setAddResourceUpdate(actor, resource, amount, clamp, update);\n        break;\n      case 2:\n        // To max\n        setMaxResourceUpdate(actor, resource, update);\n        break;\n      case 3:\n        // To zero\n        setResourceUpdate(actor, resource, 0, update);\n        break;\n      case 5:\n        // Set to value\n        setResourceUpdate(actor, resource, amount, update);\n    }\n    return update;\n  }\n\n  /**\n   * Determine if a given value matches a set of flags.\n   * @param {number} value The value we are checking\n   * @param {number} flag The flag we are checking for\n   */\n  function hasFlag(value, flag) {\n    return (value & flag) === flag;\n  }\n\n  /**\n   * Retrieves an affinity for a given damage type on a given token's actor.\n   * -1 = Vulnerable\n   *  0 = None\n   *  1 = Resistance\n   *  2 = Immunity\n   *  3 = Absorption\n   * @param {FUActor} actor\n   * @param {string} damageType\n   * @returns\n   */\n  function getAffinity(actor, damageType) {\n    return actor.system?.affinities[damageType]?.current || 0;\n  }\n\n  /**\n   * Calculates the actual damage to apply to a token, given their Damage Affinities and\n   * our specified affinity bypasses, if any\n   * @param {FUActor} actor\n   * @param {object} formdata\n   */\n  function calculateEffectiveDamage(actor, formData) {\n    if (formData.hpOperation !== 0) return 0;\n    const amount = formData.attributeHP;\n\n    const affinity = getAffinity(actor, formData.damageType);\n    // If no affinity, no math\n    if (affinity === 0) return amount;\n\n    const ignoreAffinities = formData.ignoreAffinities;\n\n    // If we're ignoring affinities, just ... return\n    if (hasFlag(ignoreAffinities, IgnoreAffinity.All)) return amount;\n\n    switch (affinity) {\n      case -1:\n        // VU\n        if (hasFlag(ignoreAffinities, IgnoreAffinity.Vulnerabilities))\n          return amount;\n        else return amount * 2;\n      case 1:\n        // RS\n        if (hasFlag(ignoreAffinities, IgnoreAffinity.Resistances))\n          return amount;\n        else return Math.floor(amount / 2);\n      case 2:\n        // IM\n        if (hasFlag(ignoreAffinities, IgnoreAffinity.Immunities)) return amount;\n        else return 0;\n      case 3:\n        // AB\n        if (hasFlag(ignoreAffinities, IgnoreAffinity.Absorption)) return amount;\n        else return -1 * amount;\n    }\n  }\n\n  /**\n   * Coerces a simplified update object that's generated during form processing into\n   * the format that an actor update expects\n   * @param {object} update\n   */\n  function convertUpdateObject(update) {\n    const newUpdate = {};\n    if (typeof update.hp !== \"undefined\")\n      newUpdate[`system.resources.hp.value`] = update.hp;\n    if (typeof update.mp !== \"undefined\")\n      newUpdate[`system.resources.mp.value`] = update.mp;\n    if (typeof update.ip !== \"undefined\")\n      newUpdate[\"system.resources.ip.value\"] = update.ip;\n\n    return newUpdate;\n  }\n\n  /**\n   * Retrieves an object to pass to the chat card templates\n   * @param {FUActor} actor\n   * @param {object} update\n   */\n  function getUpdateContext(actor, update) {\n    const context = {\n      name: actor.name,\n      img: actor.img,\n      actor,\n      isPC: isPC(actor),\n      hasResourceUpdate:\n        update.hp !== undefined ||\n        update.mp !== undefined ||\n        update.ip !== undefined,\n    };\n    if (update.hp !== undefined)\n      context.hp = { current: getResourceValue(actor, \"hp\"), new: update.hp };\n    if (update.mp !== undefined)\n      context.mp = { current: getResourceValue(actor, \"mp\"), new: update.mp };\n    if (update.ip !== undefined)\n      context.ip = { current: getResourceValue(actor, \"ip\"), new: update.ip };\n    return context;\n  }\n\n  /**\n   * Retrieves an object to pass to the chat card templates for a zero power's update.\n   * @param {FUItem} zeroPower Item representing the Zero Power\n   * @param {number} oldValue Old value of the Zero Power's clock\n   * @param {number} newValue New value of the Zero Power's clock\n   * @returns\n   */\n  function getZeroPowerUpdateContext(zeroPower, oldValue, newValue) {\n    if (oldValue === newValue) return {};\n\n    // const progressArr = Array.isArray(zeroPower.progressArr)\n    //   ? zeroPower.progressArr.map((arg) => ({\n    //       id: arg.id,\n    //       checked: arg.id === newValue,\n    //     }))\n    //   : new Array(6).fill(0).map((_, i) => ({\n    //       id: i,\n    //       checked: i === newValue,\n    //     }));\n\n    const max = getZeroPowerProgressMax(zeroPower);\n\n    return {\n      zp: {\n        name: zeroPower.name,\n        current: oldValue,\n        max,\n        isReady: newValue === max,\n        new: newValue,\n        // arr: progressArr,\n        data: {\n          max,\n        },\n      },\n    };\n  }\n\n  /**\n   * Gets a user that has this actor as their character\n   * @param {FUActor} actor\n   */\n  function getTokenPlayer(actor) {\n    return game.users.contents.find((user) => user.character?.id === actor.id);\n  }\n\n  /**\n   * Short-hand to call a Dialog or DialogV2 confirmation .... dialog\n   * @param {string} title\n   * @param {string} content\n   * @returns\n   */\n  function showConfirmationDialog(title, content, modal) {\n    if (USE_DIALOGV2) {\n      return foundry.applications.api.DialogV2.confirm({\n        window: { title },\n        content,\n        modal: !!modal,\n      });\n    } else {\n      return dialog.confirm({\n        content,\n        title,\n      });\n    }\n  }\n\n  function addSelectedTokenNamesToDialog(elem) {\n    elem.find(\"[data-role='token-names']\").text(\n      canvas.tokens.controlled\n        .sort(tokenSorter)\n        .map((token) => token.name)\n        .join(\", \")\n    );\n  }\n\n  async function addTokensClickHandler() {\n    let HookID;\n    try {\n      let dialogElement;\n      HookId = Hooks.on(\"controlToken\", (token, selected) => {\n        addSelectedTokenNamesToDialog(dialogElement);\n      });\n\n      const confirm = await (USE_DIALOGV2\n        ? foundry.applications.api.DialogV2.wait({\n            window: { title: LOCALIZATION.DIALOG.ADDTOKENS.TITLE },\n            content: addTokenRenderFunc(),\n            render: (e, elem) => {\n              dialogElement = $(elem);\n              addSelectedTokenNamesToDialog($(elem));\n            },\n            buttons: [\n              {\n                label: `<i class=\"fas fa-times\"></i> ${LOCALIZATION.DIALOG.ADDTOKENS.BUTTONS.CANCEL}`,\n                action: \"cancel\",\n              },\n              {\n                label: `<i class=\"fas fa-check\"></i> ${LOCALIZATION.DIALOG.ADDTOKENS.BUTTONS.OK}`,\n                action: \"ok\",\n              },\n            ],\n          })\n        : Dialog.wait({\n            title: LOCALIZATION.DIALOG.ADDTOKENS.TITLE,\n            content: addTokenRenderFunc(),\n            onRender(html) {\n              dialogElement = html;\n              addSelectedTokenNamesToDialog(html);\n            },\n            buttons: {\n              cancel: {\n                label: LOCALIZATION.DIALOG.ADDTOKENS.BUTTONS.CANCEL,\n                icon: \"<i class='fas fa-times'></i>\",\n                callback: () => \"cancel\",\n              },\n              ok: {\n                icon: \"<i class='fas fa-check'></i>\",\n                label: LOCALIZATION.DIALOG.ADDTOKENS.BUTTONS.OK,\n                callback: () => \"ok\",\n              },\n            },\n          }));\n\n      if (confirm === \"cancel\") return;\n\n      for (const token of canvas.tokens.controlled) {\n        addActorToDialog(\n          token.actor,\n          DIALOG_PARENT_ELEMENT.find(\".token-header\"),\n          true\n        );\n      }\n    } finally {\n      Hooks.off(\"controlToken\", HookID);\n    }\n  }\n\n  /**\n   * Sorts tokens.  PCs, then NPCs, then by name.\n   * @param {*} a\n   * @param {*} b\n   * @returns\n   */\n  function tokenSorter(a, b) {\n    if (a.actor.type === \"character\" && b.actor.type === \"npc\") return -1;\n    else if (a.actor.type === \"npc\" && b.actor.type === \"character\") return 1;\n    else return a.name.localeCompare(b.name);\n  }\n\n  // #endregion\n\n  // #region DragDrop\n  const dragDrop = new DragDrop({\n    dropSelector: \".token-header\",\n    callbacks: {\n      drop: async (e) => {\n        const data = TextEditor.getDragEventData(e);\n\n        if (data.type === \"Actor\") {\n          const actor = await fromUuid(data.uuid);\n          if (!actor) throw new Error(LOCALIZATION.ERRORS.INVALIDACTOR);\n          if (actor.isOwner) {\n            addActorToDialog(actor, e.target);\n          }\n        } else if (data.type === \"Folder\") {\n          const folder = await fromUuid(data.uuid);\n          if (!folder) throw new Error(LOCALIZATION.ERRORS.INVALIDFOLDER);\n          const actors = folder.contents.filter(({ isOwner }) => isOwner);\n          for (const actor of actors) addActorToDialog(actor, e.target);\n        }\n      },\n    },\n  });\n\n  /**\n   * Retrieves IDs of the tokens for each element present in the dialog\n   * @param {*} html\n   * @returns\n   */\n  function getSelectedTokenIds(html) {\n    return html\n      .find(\"[data-token-id]:not([data-token-id=''])\")\n      .toArray()\n      .map((elem) => elem.dataset.tokenId);\n  }\n\n  /**\n   * Returns tokens for each element currently present in the dialog\n   * @param {*} html\n   * @returns\n   */\n  function getSelectedTokens(html) {\n    return html\n      .find(\"[data-token-id]:not([data-token-id=''])\")\n      .toArray()\n      .map((elem) => canvas.tokens.get(elem.dataset.tokenId));\n  }\n\n  function getSelectedActors(html) {\n    return html\n      .find(`[data-actor-id]:not([data-actor-id=''])`)\n      .toArray()\n      .map((elem) => game.actors.get(elem.dataset.actorId));\n  }\n\n  function getSelectedActorIds(html) {\n    return html\n      .find(`[data-actor-id]:not([data-actor-id=''])`)\n      .toArray()\n      .map((elem) => elem.dataset.actorId);\n  }\n\n  function isTokenInDialog(html, token) {\n    return getSelectedTokens(html).includes(token);\n  }\n\n  function isActorInDialog(html, actor) {\n    return getSelectedActors(html).includes(actor);\n  }\n\n  /**\n   * Injects an actor token header to the dialog.\n   * @param {FUActor} actor\n   * @param {JQuery<HTMLElement>} elem\n   */\n  async function addActorToDialog(actor, elem, fromToken) {\n    console.log(\"Adding actor:\", actor, elem[0]);\n    const html = $(elem).parents(\"#resourcesForm\").find(\".token-header\");\n\n    if (isActorInDialog(html, actor)) {\n      ui.notifications.warn(\n        localize(LOCALIZATION.WARNINGS.ACTOREXISTS, [[\"NAME\", actor.name]])\n      );\n      return;\n    }\n\n    // Prompt the user to make sure we want to edit tokens without linked actors,\n    // since these are likely NPCs meant to be duplicated and should probably\n    // be edited from the token, rather than the actor library.\n    if (!fromToken && !actor.prototypeToken.actorLink) {\n      const confirm = await showConfirmationDialog(\n        LOCALIZATION.NOLINKEDACTORCONFIRM.TITLE,\n        `<p>${localize(LOCALIZATION.NOLINKEDACTORCONFIRM.MESSAGE, [\n          [\"name\", actor.name],\n        ])}</p>`.replaceAll(\"\\n\", \"<br>\\n\"),\n        true\n      );\n      if (!confirm) return;\n    }\n\n    const content = tokenItemRenderFunc({\n      token: { id: \"\", name: \"\" },\n      actor: getActorContext(actor),\n    });\n\n    html.append(content);\n    const appended = html.find(\".token-item:last-child\");\n\n    appended.find(\"[data-operation='remove-token']\").on(\"click\", function (e) {\n      e.preventDefault();\n      handleRemoveButtonClick(this);\n    });\n\n    html\n      .parents(\".window-content\")\n      .find(\".form-footer button[data-action='ok']\")\n      .removeAttr(\"disabled\");\n    appended.hide().fadeIn();\n\n    showOrHidePCRows(html.parents(\"#resourcesForm\"));\n  }\n\n  function showPCRows(html) {\n    html.find(\"[data-resource='ip'],[data-resource='zp']\").fadeIn();\n  }\n\n  function hidePCRows(html) {\n    html.find(\"[data-resource='ip'],[data-resource='zp']\").fadeOut();\n  }\n\n  function showOrHidePCRows(html) {\n    const hasPC = getSelectedActors(html).some(isPC);\n    if (hasPC) showPCRows(html);\n    else hidePCRows(html);\n  }\n\n  function handleRemoveButtonClick(button) {\n    const html = $(button).parents(\"#resourcesForm\");\n    const count = getSelectedActorIds(html).length;\n    if (count <= 1) {\n      $(button)\n        .parents(\".window-content\")\n        .find(\".form-footer button[data-action='ok']\")\n        .attr(\"disabled\", \"disabled\");\n    }\n\n    const removingId = $(button).parents(\".token-item\").data(\"actor-id\");\n    const hasPCs = getSelectedActors(html).some(\n      (actor) => actor.id !== removingId && isPC(actor)\n    );\n    if (!hasPCs) hidePCRows(html);\n\n    $(button)\n      .parents(\".token-item\")\n      .fadeOut(function () {\n        $(this).remove();\n      });\n  }\n\n  // #endregion\n\n  /***************************************************************************\n   * Dialog\n   **************************************************************************/\n  // #region Dialog\n\n  /**\n   * Handles wiring up event listeners for form reactivity\n   * @param {JQuery<HTMLElement> html\n   */\n  function onRender(html) {\n    dragDrop.bind(html[0]);\n\n    html.find(\"[data-action='add-tokens']\").on(\"click\", (e) => {\n      e.preventDefault();\n      addTokensClickHandler();\n    });\n\n    html.find(\"input[type='number']\").first().select();\n\n    html.find(\"input\").on(\"keydown\", (e) => {\n      if (e.which === 13) {\n        e.preventDefault();\n        html.find(\".form-footer [data-action='ok']\").trigger(\"click\");\n      }\n    });\n\n    // Set number fields to select their contents on focus\n    html.find(`input[type=\"number\"]`).on(\"focus\", (e) => {\n      e.target.select();\n    });\n\n    // Set up remove token buttons\n    html.find(\"[data-operation='remove-token']\").on(\"click\", function (e) {\n      e.preventDefault();\n      handleRemoveButtonClick(this);\n    });\n\n    // Handle increment and decrement buttons\n    html.find(`[data-operation=\"increment\"]`).on(\"click\", (e) => {\n      e.preventDefault();\n\n      const field = e.currentTarget.dataset[\"field\"];\n      if (!field)\n        throw new Error(\n          localize(LOCALIZATION.ERRORS.INVALIDFIELD, [[\"FIELD\", field]])\n        );\n\n      const input = html.find(`#${field}`);\n      const step = parseFloat(input.attr(\"step\") ?? 1);\n      input.val(parseFloat(input.val()) + step);\n    });\n\n    html.find(`[data-operation=\"decrement\"]`).on(\"click\", (e) => {\n      e.preventDefault();\n\n      const field = e.currentTarget.dataset[\"field\"];\n      if (!field)\n        throw new Error(\n          localize(LOCALIZATION.ERRORS.INVALIDFIELD, [[\"FIELD\", field]])\n        );\n\n      const input = html.find(`#${field}`);\n      const step = parseFloat(input.attr(\"step\") ?? 1);\n      input.val(parseFloat(input.val()) - step);\n    });\n\n    // Set operation drop-downs to swap between increase and decrease\n    // if their respective value number field is negative\n    html.find(\"[data-operation-value]\").on(\"change\", (e) => {\n      const [, op, elem] = getOperationElements($(e.target));\n\n      const val = parseInt(elem.val());\n      if (val < 0) {\n        elem.val(Math.abs(val));\n        op.val(op.val() === \"0\" ? \"1\" : \"0\").change();\n      }\n    });\n\n    // Disable input fields if operation set to anything but increase/decrease\n    html.find(\"[data-operation-type\").on(\"change\", (e) => {\n      reconcileOperationRowDisabled(\n        $(e.target).parents(\"[data-operation-row]\")\n      );\n    });\n\n    // Disable hp, mp, ip inputs when set to max\n    html.find(\"#allToMax\").on(\"change\", (e) => {\n      const elem = $(e.target);\n      const checked = elem.is(\":checked\");\n      if (checked) {\n        html\n          .find(\n            \"[data-operation-row] input, [data-operation-row] select, [data-operation-row] button\"\n          )\n          .attr(\"disabled\", \"disabled\");\n      } else {\n        html.find(\"[data-operation-row]\").each(function () {\n          $(this).find(\"[data-operation-type]\").removeAttr(\"disabled\");\n          reconcileOperationRowDisabled($(this));\n        });\n      }\n    });\n  }\n\n  /**\n   *\n   * @param {FUActor} actor\n   * @param {object} formData\n   * @returns {[object, object]}\n   */\n  function handleSubmitForActor(actor, formData) {\n    let update = {};\n    let updateContext = {};\n\n    // Base resources\n    if (formData.allToMax) {\n      setMaxResourceUpdate(actor, \"hp\", update);\n      setMaxResourceUpdate(actor, \"mp\", update);\n      if (isPC(actor)) setMaxResourceUpdate(actor, \"ip\", update);\n    } else {\n      handleStandardResourceUpdates(\n        actor,\n        \"hp\",\n        formData.hpOperation,\n        formData.attributeHP,\n        !formData.bypassClamping,\n        update\n      );\n      handleStandardResourceUpdates(\n        actor,\n        \"mp\",\n        formData.mpOperation,\n        formData.attributeMP,\n        !formData.bypassClamping,\n        update\n      );\n      if (isPC(actor)) {\n        handleStandardResourceUpdates(\n          actor,\n          \"ip\",\n          formData.ipOperation,\n          formData.attributeIP,\n          !formData.bypassClamping,\n          update\n        );\n\n        if (formData.ipOperation === 0)\n          setSubResourceUpdate(\n            actor,\n            \"ip\",\n            formData.attributeIP,\n            !formData.bypassClamping,\n            update\n          );\n      }\n\n      if (formData.mpOperation === 0)\n        setSubResourceUpdate(\n          actor,\n          \"mp\",\n          formData.attributeMP,\n          !formData.bypassClamping,\n          update\n        );\n\n      // Damage\n      if (formData.hpOperation === 0)\n        setSubResourceUpdate(\n          actor,\n          \"hp\",\n          calculateEffectiveDamage(actor, formData),\n          !formData.bypassClamping,\n          update\n        );\n      // Crisis\n      else if (formData.hpOperation === 4)\n        setResourceUpdate(\n          actor,\n          \"hp\",\n          Math.floor(getResourceValue(actor, \"hp\") / 2),\n          update\n        );\n    }\n\n    updateContext = {\n      ...updateContext,\n      ...getUpdateContext(actor, update),\n    };\n\n    // Zero powers\n    const zeroPower = getZeroPower(actor);\n    if (zeroPower) {\n      const { current: oldValue, max } = getZeroPowerProgress(zeroPower);\n\n      let newValue = oldValue;\n      switch (formData.zpOperation) {\n        case 0:\n          // Advance\n          newValue = clamp(oldValue + formData.attributeZP, 0, max);\n          break;\n        case 1:\n          // Clear\n          newValue = 0;\n          break;\n        case 5:\n          // Set to\n          newValue = clamp(formData.attributeZP, 0, max);\n          break;\n      }\n\n      if (newValue !== oldValue) {\n        setClockTo(actor, zeroPower, newValue).catch((err) => {\n          throw err;\n        });\n\n        updateContext = {\n          ...updateContext,\n          ...getZeroPowerUpdateContext(zeroPower, oldValue, newValue),\n        };\n      }\n    }\n\n    return [update, updateContext];\n  }\n\n  /**\n   * Apply\n   * @param {JQuery<HTMLElement>}  html\n   */\n  async function onSubmit(html) {\n    const formData = parseFormData(html);\n\n    // Bit of a special case.  Rather than forcefully swapping the operation when adjusting\n    // the value by increment/decrement buttons, we swap it here because decreasing HP should\n    // apply damage affinities, and we don't want to miss that if we're increasing by a\n    // negative value\n    if (formData.attributeHP < 0) {\n      if (formData.hpOperation === 0) {\n        formData.hpOperation = 1;\n        formData.attributeHP = Math.abs(formData.attributeHP);\n      } else if (formData.hpOperation === 1) {\n        formData.hpOperation = 0;\n        formData.attributeHP = Math.abs(formData.attributeHP);\n      }\n    }\n\n    // const tokenElements = html.find(\"[data-actor-id\");\n    // console.log(tokenElements.toArray().map(elem => [elem.dataset.tokenId, elem.dataset.actorId]));\n\n    const itemsToUpdate = html\n      .find(\"[data-actor-id]\")\n      .toArray()\n      .map((elem) => ({\n        token: canvas.scene.tokens.get(elem.dataset.tokenId),\n        actor: elem.dataset.tokenId\n          ? canvas.scene.tokens.get(elem.dataset.tokenId).actor\n          : game.actors.get(elem.dataset.actorId),\n      }));\n\n    const updates = [];\n    const updateContexts = [];\n\n    for (const { actor } of itemsToUpdate) {\n      const [update, updateContext] = handleSubmitForActor(actor, formData);\n\n      if (updateContext.hasResourceUpdate || updateContext.zp) {\n        updateContexts.push(updateContext);\n        if (updateContext.hasResourceUpdate) {\n          updates.push(update);\n          update[\"actor\"] = actor;\n        }\n      }\n    }\n\n    if (updateContexts.length) {\n      // Notify GM(s)\n      const gms = game.users.filter(({ isGM }) => isGM);\n      for (const gm of gms) {\n        ChatMessage.create({\n          user: game.users.current,\n          whisper: [gm],\n          flavor: gmCardFlavorRenderFunc(updateContexts),\n          content: gmCardContentRenderFunc(updateContexts),\n        }).catch((err) => {\n          throw err;\n        });\n      }\n\n      // Notify players\n      for (const updateContext of updateContexts) {\n        const player = getTokenPlayer(updateContext.actor);\n        if (player && !player.isSelf) {\n          ChatMessage.create({\n            speaker: {\n              actor: updateContext.actor.id,\n            },\n            user: player,\n            whisper: [player],\n            flavor: userCardFlavorRenderFunc(updateContext),\n            content: userCardContentRenderFunc(updateContext),\n          }).catch((err) => {\n            throw err;\n          });\n        }\n      }\n    }\n\n    if (updates.length) {\n      await Promise.all(\n        updates.map((update) =>\n          update.actor.update(convertUpdateObject(update))\n        )\n      );\n    } else if (updateContexts.length === 0) {\n      ui.notifications.info(LOCALIZATION.MESSAGES.NOUPDATES);\n    }\n  }\n\n  const RENDER_CONTEXT = {\n    actors: selectedTokens.sort(tokenSorter).map(getTokenContext),\n    hasPC: selectedTokens.some(({ actor }) => isPC(actor)),\n    hasZP: selectedTokens.some(({ actor }) => hasZeroPower(actor)),\n  };\n\n  if (USE_DIALOGV2) {\n    const dialog = new foundry.applications.api.DialogV2({\n      window: {\n        title: LOCALIZATION.DIALOG.TITLE,\n        resizable: true,\n      },\n      classes: [\"resourcesForm\"],\n      content: renderFunc(RENDER_CONTEXT),\n      position: {\n        width: DIALOGV2_WIDTH,\n      },\n      buttons: [\n        {\n          action: \"cancel\",\n          label: `<i class=\"fas fa-times\"></i> ${LOCALIZATION.DIALOG.BUTTONS.CANCEL}`,\n        },\n        {\n          action: \"ok\",\n          label: `<i class=\"fas fa-check\"></i> ${LOCALIZATION.DIALOG.BUTTONS.OK}`,\n          callback: async (event, button, dialog) => $(dialog).find(\"form\"),\n        },\n      ],\n      submit: (val) => {\n        if (val !== \"cancel\") return onSubmit(val);\n      },\n    });\n\n    await dialog.render({ force: true });\n    DIALOG_PARENT_ELEMENT = $(dialog.element);\n    onRender($(dialog.element), dialog);\n  } else {\n    new Dialog(\n      {\n        title: LOCALIZATION.DIALOG.TITLE,\n        content: renderFunc(RENDER_CONTEXT),\n        default: \"ok\",\n        render: (html) => {\n          DIALOG_PARENT_ELEMENT = html;\n          onRender(html);\n        },\n        buttons: {\n          cancel: {\n            icon: `<i class=\"fas fa-times\"></i>`,\n            label: LOCALIZATION.DIALOG.BUTTONS.CANCEL,\n          },\n          ok: {\n            icon: `<i class=\"fas fa-check\"></i>`,\n            label: LOCALIZATION.DIALOG.BUTTONS.OK,\n            callback: async (html) => {\n              await onSubmit(html.find(\"form\"));\n            },\n          },\n        },\n      },\n      {\n        resizable: true,\n        width: DIALOG_WIDTH,\n      }\n    ).render(true);\n  }\n  // #endregion\n} catch (err) {\n  ui.notifications?.error(err.message);\n  console.error(err);\n}\n",
  "folder": null,
  "sort": 0,
  "ownership": {
    "default": 0,
    "PPShuIcaH5NYIBgf": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "projectfu",
    "systemVersion": "2.4.8",
    "createdTime": 1736465841491,
    "modifiedTime": 1736465841491,
    "lastModifiedBy": "PPShuIcaH5NYIBgf"
  },
  "_key": "!macros!iqGbCrPzsWA15c66"
}